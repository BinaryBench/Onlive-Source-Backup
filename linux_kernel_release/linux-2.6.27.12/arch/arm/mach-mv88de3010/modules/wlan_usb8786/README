===============================================================================
			U S E R  M A N U A L

 Copyright (C) 2008, Marvell International Ltd. 

 This software file (the "File") is distributed by Marvell International /
 Ltd. under the terms of the GNU General Public License Version 2, June 1991 
 (the "License").  You may use, redistribute and/or modify this File in 
 accordance with the terms and conditions of the License, a copy of which 
 is available by writing to the Free Software Foundation, Inc., 59 Temple
 Place, Suite 330, Boston, MA 02111-1307 or on the worldwide web at
 http://www.gnu.org/licenses/gpl.txt.

 THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE 
 IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE 
 ARE EXPRESSLY DISCLAIMED.  The License provides additional details about 
 this warranty disclaimer.

===============================================================================

1) FOR DRIVER BUILD

	Goto source code directory wlan_src/. 
	make [clean] build	
	The driver and utility binaries can be found in ../bin_xxxx directory.

2) FOR DRIVER INSTALL

	Copy firmware image usb8786.bin | ... to /lib/firmware/mrvl/ directory,
	create the directory if it doesn't exist. 

	For example, to install USB8786 driver,
		insmod mlan.ko
		insmod usb8786.ko [fw_name=mrvl/usb8786.bin]
	To install USB8786 driver with MFG firmware file 
	/lib/firmware/mrvl/usb8786mfg.bin, using the following command:
		insmod usb8786.ko mfgmode=1 fw_name=mrvl/usb8786mfg.bin

	To remove USB driver,
		rmmod usb8xxx
		rmmod mlan

3) FOR DRIVER PROC & DEBUG

	The following info are provided in /proc/net/mwlan/mlanX/info,
	on kernel 2.6.24 or later, the entry is /proc/mwlan/mlanX/info.

	driver_name = "wlan"
	driver_version = <chip id, firmware version and driver version>
	InterfaceName = "mlanX"
	Mode = "Ad-hoc" | "Managed" | "Auto" | "Unknown"
	State = "Disconnected" | "Connected"
	MACAddress = <6-byte adapter MAC address>
	MCCount = <multicast address count>
	ESSID = <current SSID>
	BSSID = <current BSSID>
	Channel = <current channel>
	region_code = <current region code>
	MCAddr[n] = <multicast address>
	num_tx_bytes = <number of bytes sent to device>
	num_rx_bytes = <number of bytes received from device and sent to kernel>
	num_tx_pkts = <number of packets sent to device>
	num_rx_pkts = <number of packets received from device and sent to kernel>
	num_tx_pkts_dropped = <number of Tx packets dropped by driver>
	num_rx_pkts_dropped = <number of Rx packets dropped by driver>
	num_tx_pkts_err = <number of Tx packets failed to send to device>
	num_rx_pkts_err = <number of Rx packets failed to receive from device>
	carrier "on" | "off"
	tx queue "stopped" | "started"

	The following debug info are provided in /proc/net/mwlan/mlanX/debug,
	on kernel 2.6.24 or later, the entry is /proc/mwlan/mlanX/debug.

	IntCounter = <interrupt count, cleared when interrupt handled>
	wmmQStp = <0/1, WMM queue started/stopped>
	wmmPkts = <number of Tx packets in WMM queues>
	wmmAcVo = <number of packets sent to device from WMM AcVo queue>
	wmmAcVi = <number of packets sent to device from WMM AcVi queue>
	wmmAcBE = <number of packets sent to device from WMM AcBE queue>
	wmmAcBK = <number of packets sent to device from WMM AcBK queue>
	PSMode = <0/1, CAM mode/PS mode>
	PSState = <0/1/2/3, full power state/awake state/pre-sleep state/sleep state>
	WakeupDevReq = <0/1, wakeup device not required/required>
	WakeupTries = <wakeup device count, cleared when device awake>
	HS_Configured = <0/1, host sleep not configured/configured>
	HS_Activated = <0/1, extended host sleep not activated/activated>
	num_tx_timeout = <number of Tx timeout>
	num_cmd_timeout = <number of timeout commands>
	TimeoutCmdId = <command id of the last timeout command>
	TimeoutCmdAct = <command action of the last timeout command>
	LastCmdId = <command id of the last several commands sent to device>
	LastCmdAct = <command action of the last several commands sent to device>
	LastCmdIndex = <0 based last command index>
	LastCmdRespId = <command id of the last several command responses received from device>
	LastCmdRespIndex = <0 based last command response index>
	LastEvent = <event id of the last several events received from device>
	LastEventIndex = <0 based last event index>
	num_cmd_h2c_fail = <number of commands failed to send to device>
	num_cmd_sleep_cfm_fail = <number of sleep confirm failed to send to device>
	num_tx_h2c_fail = <number of data packets failed to send to device>
	num_evt_deauth = <number of deauthenticated events received from device>
	num_evt_disassoc = <number of disassociated events received from device>
	num_evt_link_lost = <number of link lost events received from device>
	num_cmd_deauth = <number of deauthenticate commands sent to device>
	num_cmd_assoc_ok = <number of associate commands with success return>
	num_cmd_assoc_fail = <number of associate commands with failure return>
	cmd_sent = <0/1, send command resources available/sending command to device>
	data_sent = <0/1, send data resources available/sending data to device>
	cmdresp_received = <0/1, no cmd response to process/response received and yet to process>
	event_received = <0/1, no event to process/event received and yet to process>
	rx_pending = <number of Rx packet pending>
	ioctl_pending = <number of ioctl pending>
	tx_pending = <number of Tx packet pending>
	malloc_count = <number of malloc done>

	Use dmesg or cat /var/log/debug to check driver debug messages.
	To log driver debug messages to file,
	a) Edit /etc/syslog.conf, add one line "*.debug		/var/log/debug"
	   on kernel 2.6.24 or later, edit /etc/rsyslog.conf instead
	b) touch /var/log/debug (if the file doesn't exist)
	c) service syslog restart
	   on kernel 2.6.24 or later, service rsyslog restart

	Update /proc/sys/kernel/printk to change message log levels.
	For example,
	echo 6 > /proc/sys/kernel/printk    (messages with a higher priority than 6 
	                                     will be printed to the console)
	echo 15 > /proc/sys/kernel/printk   (all messages will be printed to console)

4) FOR IWPRIV COMMAND

NAME
	This manual describes the usage of private commands used in Marvell MLAN
	Linux Driver.

	To use parameters as hex format, a '0x' must precede it for the parameters to 
	be parsed properly. 

SYNOPSIS
	iwpriv <mlanX> <command> [sub-command] ...

	iwpriv mlanX version
	iwpriv mlanX verext
	iwpriv mlanX getsignal [m] [n]
	iwpriv mlanX antcfg [m]
	iwpriv mlanX regioncode [n]
	iwpriv mlanX esuppmode
	iwpriv mlanX passphrase <ssid/psk/passphrase>
	iwpriv mlanX httxcfg <m>
	iwpriv mlanX htcapinfo <m>
	iwpriv mlanX addbapara <m> <n> <o>
	iwpriv mlanX aggrpriotbl <n>
	iwpriv mlanX txbufcfg <n>
	iwpriv mlanx amsduaggrctrl <n>
	iwpriv mlanX atimwindow [n]
	iwpriv mlanX usbsuspend
	iwpriv mlanX usbresume
	iwpriv mlanX hscfg [condition [[GPIO# [gap]]]]
	iwpriv mlanX hssetpara condition [GPIO# [gap]]
	iwpriv mlanX deauth [n]
	iwpriv mlanX radioctrl
	iwpriv mlanX reassoctrl [n]
	iwpriv mlanX adhocaes
	iwpriv mlanX bandcfg [l] [m] [n]
	iwpriv mlanX getlog
	iwpriv mlanX 11dcfg
	iwpriv mlanX wmmcfg [n]
	iwpriv mlanX txpowercfg [<RateIndex> [<MinPwr> [<MaxPwr> <step>]]]
	iwpriv mlanX qoscfg
	iwpriv mlanX getdatarate
	iwpriv mlanX txratecfg [n]
	iwpriv mlanX bcninterval [n]
	iwpriv mlanX sysclock [clk1] [clk2] [clk3] [clk4]
	iwpriv mlanX drvdbg [n] [m]
	iwpriv mlanX warmreset
	iwpriv mlanX heartbeat [<hTime> <dTime>]
	iwpriv mlanX regrdwr <type> <offset> [value]
	iwpriv mlanX rdeeprom <offset> <length>
	iwpriv mlanX inactivityto <n> <m> <l> [k]

DESCRIPTION
	Those commands are used to send additional commands to the Marvell MLAN
	card via the Linux device driver.

	The mlanX parameter specifies the network device that is to be used to 
	perform this command on. It could be mlan0, mlan1 etc.

version	
	This is used to get the current version of the driver and the firmware.

verext
	Retrieve and display an extended version string from the firmware

	Usage:
		iwpriv mlanX verext [#]

	where [#] is an optional argument to retrieve a specific version string,
	omission of the argument retrieves the 0 indexed string.

getsignal
	This command gets the average and last value of RSSI, SNR and NF of
	Beacon and Data.
	Note: This command is available only when STA is connected.

	where value of m is:
		1   -- RSSI (Receive Signal Strength Indication)
		2   -- SNR (Signal to Noise Ratio)
		3   -- NF (Noise Floor)
	where value of n is:
		1   -- Beacon last
		2   -- Beacon average
		3   -- Data last
		4   -- Data average

	Examples:
		iwpriv mlan0 getsignal          : Get all of the signal info
		iwpriv mlan0 getsignal 1        : Get the RSSI info (beacon last, beacon
		                                  average, data last and data average)
		iwpriv mlan0 getsignal 3 4      : Get the NF of data average
		iwpriv mlan0 getsignal 2 1      : Get the SNR of beacon last

antcfg
	This command is used to set/get the mode of Tx/Rx antenna. 

	where value of m is:
		1       -- Tx/Rx antenna 1.
		2       -- Tx/Rx antenna 2.
		0xFFFF  -- Tx/Rx antenna diversity.

	Examples:
		iwpriv mlan0 antcfg             : Get Tx/Rx antenna mode
		iwpriv mlan0 antcfg 1           : Set Tx/Rx antenna 1
		iwpriv mlan0 antcfg 0xFFFF      : Set Tx/Rx antenna diversity

regioncode
	This command is used to set/get the region code in the station.
	where value is 'region code' for various regions like
	USA FCC, Canada IC, Europe ETSI, Japan ...

	Examples:
		iwpriv mlan0 regioncode         : Get region code
		iwpriv mlan0 regioncode 0x10    : Set region code to USA (0x10)

esuppmode
	This command is used to get the current RSN mode and active pairwise/group 
    cipher for WPA/WPA2 mode.
	Note: This command is available only when STA is connected.

	These are bits settings used to indicate each RSN mode.
		Bit 0    : No RSN
		Bit 1-2  : RFU
		Bit 3    : WPA
		Bit 4    : WPA-NONE
		Bit 5    : WPA2
		Bit 6    : AES CCKM
		Bit 7-15 : RFU

	These are bits settings used to indicate each pairwise and group cipher.
		Bit 0    : RFU
		Bit 1    : RFU
		Bit 2    : TKIP
		Bit 3    : AES CCKM
		Bit 2-7  : RFU

	Example:
		iwpriv mlan0 esuppmode          : Get RSN mode and pairwise/group cipher
		8 4 4
		(The current RSN mode is WPA, active pairwise cipher is TKIP and 
		 active group cipher is TKIP.)

passphrase
	This command is used to set/get passphrase for WPA-PSK/WPA2-PSK mode.
	
	Where <n>		
		ASCII string for ssid/passphrase/psk.
	
	1) "0;<ssid=valid ssid>" - This will get the passphrase, AKMP 
	   for specified ssid, if none specified then it will get all.
	            
	Example:
		iwpriv mlan0 passphrase "0;ssid=marvell"

	2) "1;<psk=64 byte hexpsk>;<passphrase=1-63 byte passphare>
	   <ssid=valid ssid>" - Passphrase and psk cannot be provided for the same SSID. 
	   This command takes only one SSID at a time, If ssid= is present it should contain 
	   a passphrase or psk. If no arguments are provided then AKMP=802.1x, and passphrase 
	   should be provided after association.
	   End of each parameter should be followed by a ';'(except for the last parameter) 
	   as the delimiter. If ';' has to be used in an SSID then a '/' should be preceded 
	   to ';' as a escape.
	            
	Examples:
		iwpriv mlan0 passphrase "1;ssid=mrvl AP;passphrase=abcdefgh"
		iwpriv mlan0 passphrase "1;ssid=mrvl/; AP;psk=<64 bytes hexpsk>"
		iwpriv mlan0 passphrase "1;ssid=mrvlAP;passphrase=abcdefgd"

	3) "2;<ssid=valid ssid>" - This will clear the passphrase 
	   for specified ssid, if none specified then it will clear all.
	            
	Examples:
		iwpriv mlan0 passphrase "2;ssid=marvell"
		iwpriv mlan0 passphrase "2"     : Clear all profiles and disable embedded supplicant

httxcfg
	This command is used to configure various 11n specific configration 
	for transmit (such as Short GI, Channel BW and Green field support)

	where <m>
	This is a bitmap and should be used as following
		Bit 15-7: Reserved set to 0
		Bit 6: Short GI in 40 Mhz enable/disable
		Bit 5: Short GI in 20 Mhz enable/disable
		Bit 4: Green field enable/disble
		Bit 3-2: Reserved set to 0
		Bit 1: 20/40 Mhz enable disable.
		Bit 0: Reserved set to 0

	Note: Currently enable/disabling of Short GI should to both 20Mhz and 
	40Mhz (i.e. Enabling Short GI for 20Mhz and disabling Short GI for 
	40Mhz or vice versa is not allowed. Both should be enabled or disabled)

	When Bit 1 is set then firmware could transmit in 20Mhz or 40Mhz based
	on rate adaptation. When this bit is reset then firmware will only
	transmit in 20Mhz.

	iwpriv mlanX httxcfg 0x60
	This will enable Short GI but will disable Green field.

	iwpriv mlanX httxcfg 0x70
	This will enable Short GI, Green field.

	The default value is 0x62

htcapinfo
	This command is used to configure some of paramters in HTCapInfo IE 
	(such as Short GI, Channel BW, and Green field support)

	where <m>
	This is a bitmap and should be used as following
		Bit 29: Green field enable/disble
		Bit 24: Short GI in 40 Mhz enable/disable
		Bit 23: Short GI in 20 Mhz enable/disable
		Bit 17: 20/40 Mhz enable disable.
		All others are reserved and should be set to 0.

	Setting of any other bits will return error.

	iwpriv mlanX htcapinfo 0x21820000
	This will enable Short GI, Channel BW to 20/40 and Green field support is set.

	iwpriv mlanX htcapinfo 0x21800000
	This will enable Short GI, Channel BW to 20 only and Green field support is set.

	The default value is 0x21820000

	Note:- This command can be issued any time but it will only come to effect from
	next association. (as HTCapInfo is sent only during Association).

addbapara
	This command can be used to update the default ADDBA parameters.

	where <m> is <timeout>
	<timeout> - This is the block ack timeout for ADDBA request. 
		0 : Disable (recommended for throughput test)
		1 - 65535 : Block Ack Timeout in us

	where <n> is <txwinsize>
	<txwinsize> - Buffer size for ADDBA request. (64 is recommended and default value)

	where <o> is <rxwinsize>
	<rxwinsize> - Buffer size for ADDBA response. (10 is recommended and default value)

	eg:
	iwpriv mlanX addbapara - This command will get the current addba params
	iwpriv mlanX addbapara 1000 64 5 (This will change the ADDBA timeout to (1000 * 1024) us,
			txwinsize to 64 and rxwinsize to 5.

	In case the ADDBA timeout value is updated then a ADDBA is sent for all streams 
	to update the timeout value.

	In case txwinsize and/or rxwinsize is update the effect could only be seen on
	next ADDBA request/response. The current streams will not be affected with this
	change.

aggrpriotbl
	This command is used set/get the priority table for AMPDU/AMSDU traffic per tid.
	This command can also be used to disable AMPDU/AMSDU for a given tid.
	In case of AMPDU this priority table will be used to setup block ack (to make
	sure the highest priority tid always uses AMPDU as we have limited AMPDU streams)

	where <m0> <n0> <m1> <n1> ... <m7> <n7>

	<mx> - This is priority for Tid0 for AMPDU packet. A priority could be any 
		   values between 0 - 7, 0xff to disable aggregation.
	<nx> - This is priority for Tid0 for AMSDU packet. A priority could be any 
		   values between 0 - 7, 0xff to disable aggregation.

	eg:
	iwpriv mlanX aggrpriotbl - This command will get the current Priority table for AMPDU and AMSDU.
						  <2 2 0 0 1 1 3 3 4 4 5 5 255 255 255 255>. This is read as
						  <"Prio for AMPDU for Tid0" "Prio for AMSDU for Tid0" 
						   "Prio for AMPDU for Tid1" "Prio for AMSDU for Tid1" and so on
	iwpriv mlanX aggrpriotbl 2 2 0 0 1 1 3 3 4 4 5 5 255 255 255 255 - 
						This will set the priority table for AMPDU and AMSDU
						Priority for Tid0/AMPDU = 2, Tid0/AMSDU = 2, Tid1/AMPDU = 0, Tid1/AMSDU = 0
						and so on. Aggregation for Tid6 and Tid7 are disabled. 
						Here higher the priority number, higher the priority (i.e. 7 
						has higher priority than 6). Similarly for AMSDU.
	iwpriv mlanX aggrpriotbl 0xff 2 0xff 0 0xff 1 0xff 3 0xff 4 0xff 5 0xff 0xff 0xff 0xff - This will disable
						AMPDU for all the TIDs but will still keep AMSDU enabled to Tid0 to Tid5

	A delBA should be seen in case a disable happens on a TID for which AMPDU stream 
	is currently setup. 

	Note:- This command should only be issue in non-connected mode.

txbufcfg
	This command can be used to set max transmit buffer size of firmware. Increasing this
	buffer size is recommended for AMSDU packets. (Default is 2048)

	where <n> is <buffer size in byte>

	<buffer size> - This can be 2048/4096/8192.

	eg:
	iwpriv mlanX txbufcfg 	  - This will display the current buffer size.
	iwpriv mlanX txbufcfg 8192 - This will change the tx buffer size of 8192.

	For AMSDU for work for multiple packets we may need the max tx buffer size to be
	4096/8192.

	Note:- This command should be issue in non-connected mode. 
           Otherwise, new setting will be effected in next time associate. 
           The actual tx buf size will depends on AP's capability and max transmit buffer size. 

amsduaggrctrl
	This command could be used to enable/disable a feature where firmware gives feedback to driver
	regarding the optimal AMSDU buffer size to use with the current rate. Firmware will use the 
	current rate to decide the buffer size we could transmit. The max buffer size will still be 
	limited by buffer size provided in txbufcfg. (i.e. if the txbufcfg is 4K, then we could only transmit
	4K/2K AMSDU packets, if the txbufcfg is 8K then we could transmit 8k/4k/2k based on current rate)

	If enabled AMSDU buffer size at various rates will be as follows

	1.	Legacy B/G rate.
		No AMSDU aggregation.

	2.	BW20 HT Rate:
		When TX rate goes down, 
		MCS 7, 6, 5, 4:
			a	8K aggregation size (if TX buffer size is 8K)
			b	4K aggregation size (if TX buffer size is 4K)
			c	2K aggregation size (if TX buffer size is 2K)

		MCS 3, 2:
			a	4K aggregation size (if TX buffer size is 8K/4K)
			b	2K aggregation size (if TX buffer size is 2K)

		MCS 1, 0:
			a	No aggregation
		
	3.	BW40 HT Rate:
		When TX rate goes down, 
		MCS 7, 6, 5, 4, 3, 2, 1:
		a	8K aggregation size (if TX buffer size is 8K)
		b	4K aggregation size (if TX buffer size is 4K)
		c	2K aggregation size (if TX buffer size is 2K)

		MCS 0:
		a	No aggregation

	where <n> is 0/1 (for disable/enable)

	eg:
	iwpriv mlanx amsduaggrctrl 1 - Enable this feature
	iwpriv mlanx amsduaggrctrl 0 - Disable this feature
	iwpriv mlanx amsduaggrctrl (This will get the enable/disable flag
	and the current AMSDU buffer size). The AMSDU buffer size returned is only
	valid after association as before association there is no rate info.

	Note:- This command to enable/disable could be given anytime (before/after
			association). This feature is enabled by default by the driver during
			initialization.

atimwindow
	This command is used to set/get the ATIM window value in the station.
	The range of ATIM window is 0 - 50.
	Note: This command should be issued before ad-hoc start/join and ad-hoc 
	power save on.

	Examples:
		iwpriv mlan0 atimwindow 20      : Set atimwindow to 20
		iwpriv mlan0 atimwindow         : Get atimwindow

usbsuspend
	This command is used to put device to suspend mode.
	Note: It's only valid on kernel 2.6.24 or later.

usbresume
	This command is used to resume the device from suspend mode.
	Note: It's only valid on kernel 2.6.24 or later.

hscfg
	This command is used to configure the host sleep parameters.

	Usage:
		iwpriv mlanX hscfg [condition [[GPIO# [gap]]]]

	This command takes one (condition), two (condition and GPIO#) or three 
	(condition, GPIO# and gap) parameters for set. If no paramter provided, 
	get is performed.

	where Condition is:
		bit 0 = 1   -- broadcast data
		bit 1 = 1   -- unicast data
		bit 2 = 1   -- mac event
		bit 3 = 1   -- multicast packet

	where GPIO is the pin number of GPIO used to wakeup the host. It could be 
	any valid GPIO pin# (e.g. 0-7) or 0xff (interface, e.g. SDIO will be used 
	instead).

	where Gap is the gap in milliseconds between wakeup signal and wakeup event
	or 0xff for special setting.

	The host sleep mode will be cancelled if condition is set to -1.

	Examples:
		iwpriv mlan0 hscfg              : Get current host sleep mode
		iwpriv mlan0 hscfg -1           : Cancel host sleep mode
		iwpriv mlan0 hscfg 3            : Broadcast and unicast data
		                                  Use GPIO and gap set previously
		iwpriv mlan0 hscfg 2 3          : Unicast data
		                                  Use GPIO 3 and gap set previously
		iwpriv mlan0 hscfg 2 1 0xa0     : Unicast data
		                                  Use GPIO 1 and gap 160 ms
		iwpriv mlan0 hscfg 2 0xff       : Unicast data
		                                  Use interface (e.g. SDIO)
		                                  Use gap set previously
		iwpriv mlan0 hscfg 4 3 0xff     : MAC event
		                                  Use GPIO 3
		                                  Special host sleep mode
		iwpriv mlan0 hscfg 1 0xff 0xff  : Broadcast data
		                                  Use interface (e.g. SDIO)
		                                  Special host sleep mode

hssetpara
	This command is used to set host sleep parameters.

	Usage:
		iwpriv mlanX hssetpara Condition [GPIO# [gap]]

	Note:
	1) The usages of parameters are the same as "hscfg" command.
	2) The parameters will be saved in the driver and be used when host suspends.

deauth
	This command is used to send a de-authentication to an arbitrary AP.
	If [n] is omitted, the driver will deauth the associated AP.
	If in ad-hoc mode this command is used to stop beacon transmission 
	from the station and go into idle state.

	When <n> is supplied as a MAC address, the driver will deauth the 
	  specified AP.  If the AP address matches the driver's associated AP,
	  the driver will disconnect. Otherwise, the driver remains connected.

radioctrl
	This command is used to turn on/off the radio.

	where value of n is:
		0   -- Disable
		1   -- Enable

	Examples:
		iwpriv mlan0 radioctrl 1        : Turn the radio on
		iwpriv mlan0 radioctrl          : Get radio status

reassoctrl
	This command is used to turn on/off re-association in driver.

	Usage:
		iwpriv mlanX reassoctrl [n]

	Where value of n is:
		0   -- Disable
		1   -- Enable

	Examples:
		iwpriv mlan0 reassoctrl         : Get re-association status
		iwpriv mlan0 reassoctrl 1       : Turn re-association on

adhocaes
	This command is used to set/get the AES key, when the station is in ad-hoc
	mode.

	where value can be any 16 byte value.

	Examples:
		iwpriv mlan0 adhocaes           : Get ad-hoc aes key
		iwpriv mlan0 adhocaes "1;12345678901234567890123456789012" 
		                                : Set ad-hoc aes key
		iwpriv mlan0 adhocaes 2         : Clear ad-hoc aes key

bandcfg
	This command is used to set/get infra/ad-hoc band.

	Usage:
		iwpriv mlanX bandcfg [l] [m] [n]

	where the parameters:
		[l]: Infrastructure band
		     bit 0: B
		     bit 1: G
		     bit 3: N
		[m]: Ad-hoc band
		     bit 0: B
		     bit 1: G
		[n]: Ad-hoc start channel 

	Examples:
		iwpriv mlan0 bandcfg            : Get infra/ad-hoc band and ad-hoc
		                                  start channel configurations
		iwpriv mlan0 bandcfg 1          : Set infra band to B only
		iwpriv mlan0 bandcfg 3 2 6      : Set infra band to B/G, ad-hoc band
		                                  to G and ad-hoc start channel to 6

getlog
	This command is used to get the statistics available in the station.

11dcfg
	This command is used to control 11D. No argument is used to get.

	where value of n is:
		0   -- Disable
		1   -- Enable

	Examples:
		iwpriv mlan0 11dcfg 1           : Enable 11D
		iwpriv mlan0 11dcfg             : Get 11D status

wmmcfg
	This command is used to control WMM. No argument is used to get.

	where value of n is:
		0   -- Disable
		1   -- Enable

	Examples:
		iwpriv mlan0 wmmcfg 1           : Enable WMM
		iwpriv mlan0 wmmcfg             : Get WMM status

txpowercfg
	This command is used to get/set the Tx power configuration

	Where 
		<RateIndex> - Data rate index
			0	1 Mbps
			1	2 Mbps
			2	5.5 Mbps
			3	11 Mbps
			4	6 Mbps
			5	9 Mbps
			6	12 Mbps
			7	18 Mbps
			8	24 Mbps
			9	36 Mbps
			10	48 Mbps
			11	54 Mbps
			12	MCS0
			13	MCS1
			14	MCS2
			15	MCS3
			16	MCS4
			17	MCS5
			18	MCS6
			19	MCS7
			0xff	Auto
		<MinPwr> - Minimum power level in dBm
		<MaxPwr> - Maximum power level in dBm
		<step>   - Power step

	Examples:
		iwpriv mlan0 txpowercfg             : Get current configuration
		iwpriv mlan0 txpowercfg 0xff        : Auto power configuration
		iwpriv mlan0 txpowercfg 11 12       : Set power level 12dBm to data rate 54Mb/s
		iwpriv mlan0 txpowercfg 7 11 16 1   : Set power level 11dBm to 16dBm with
		                                      step 1 to data rate 18Mb/s

qoscfg
	This command sets WMM IE QOS info when an argument is given, and gets current WMM
	IE QOS info when no argument is given.

	Examples:
		iwpriv mlan0 qoscfg 0x0f        : Set WMM IE QOS info to 0x0f
		iwpriv mlan0 qoscfg             : Get WMM IE QOS info

getdatarate
	This command is used to get the data rate (index) being used in last Tx 
	packet and last Rx packet.

txratecfg
	This command is used to set/get the transmit data rate.
	
	Note: 
	1) The data rate can be set only after association. 
	
	2) If the reassoc is OFF driver reset the data rate to auto if the connection state is disconnected.
	Please note that user has to re-issue the set data rate command if the driver is disconnected.
	
	3) If the reassoc is ON driver remembers the data rate set by the user, if the driver is 
	disconnected user does not have to re-issue the set data rate again.
	
	Where <n>
		 data rate
				Data rate
			0	1 Mbps
			1	2 Mbps
			2	5.5 Mbps
			3	11 Mbps
			4	6 Mbps
			5	9 Mbps
			6	12 Mbps
			7	18 Mbps
			8	24 Mbps
			9	36 Mbps
			10	48 Mbps
			11	54 Mbps
			12	MCS0
			13	MCS1
			14	MCS2
			15	MCS3
			16	MCS4
			17	MCS5
			18	MCS6
			19	MCS7
			0xff	Auto

	Examples:
		iwpriv mlan0 txratecfg 3        : Set fixed Tx rate to 11 Mbps
		iwpriv mlan0 txratecfg 11       : Set fixed Tx rate to 54 Mbps	
		iwpriv mlan0 txratecfg 15       : Set fixed Tx rate to MCS3	
		iwpriv mlan0 txratecfg 0xff     : Disable fixed rate and uses auto rate
		iwpriv mlan0 txratecfg          : Read the current data rate setting

bcninterval
	This command is used to set/get the beacon interval in ad-hoc mode.
	The valid beacon interval is between 20 - 1000, default beacon
	interval is 100.

	Where <n>
		Beacon interval in TU (Time Unit: 1024 us).

	Examples:
		iwpriv mlan0 bcninterval 200    : Set ad-hoc beacon interval to 200
		iwpriv mlan0 bcninterval        : Get ad-hoc beacon interval

sysclock
	This command is used to set/get system clocks in MHz.
	The current system clock, configurable system clocks and all of the 
	supported system clocks will be returned if no parameter provided.

	Examples:
		iwpriv mlan0 sysclock           : Get system clocks
		80 80 128 128 160 5 11 16 20 22 32 40 44 64 80 106 128 160
		(The current system clock is 80 MHz.
		 The configurable system clocks of non-security, security, non-security 
		 A-MPDU and security A-MPDU are 80 MHz, 128 MHz, 128 MHz and 160 MHz.
		 The supported system clocks are 5 MHz, 11 MHz, ..., 160 MHz.)

		iwpriv mlanX sysclock 80        : Set system clock in non-security mode
		                                  to 80 MHz, no change for others
		iwpriv mlanX sysclock 0 0 128   : Set system clock in non-security A-MPDU 
		                                  mode to 128 MHz, no changes for others

drvdbg
	This command is used to set/get the bit masks of driver debug message control.

	Usage:
		iwpriv mlanX drvdbg [n] [m]

	Where the parameter <n> is the generic debug message control bit mask.
	The following types of driver debug messages can be dynamically enabled or 
	disabled by setting or clearing the corresponding bits, 
		bit 0:  MSG  		PRINTM(MSG,...)
		bit 1:  FATAL		PRINTM(FATAL,...)
		bit 2:  ERROR		PRINTM(ERROR,...)
		bit 3:  DATA 		PRINTM(DATA,...)
		bit 4:  CMND 		PRINTM(CMND,...)
		bit 5:  EVENT		PRINTM(EVENT,...)
		bit 6:  INTR 		PRINTM(INTR,...)
		...
		bit 16: DAT_D		PRINTM(DAT_D,...), DBG_HEXDUMP(DAT_D,...)
		bit 17: CMD_D		PRINTM(CMD_D,...), DBG_HEXDUMP(CMD_D,...)
		bit 18: FW_D		PRINTM(FW_D,...)
		...
		bit 28: ENTRY		PRINTM(ENTRY,...), ENTER(), LEAVE()
		bit 29: WARN 		PRINTM(WARN,...)
		bit 30: INFO 		PRINTM(INFO,...)
		bit 31: HEX_DUMP 	PRINTM(HEX_DUMP,...)

	Where the parameter <m> is the extended interface module debug message control 
	bit mask. The following types of debug messages can be controlled.

		bit 0:  IF_D 		PRINTM(IF_D,...),  DBG_HEXDUMP(IF_D,...)

	If CONFIG_DEBUG=2, all kinds of debug messages can be configured. 
	By default all debug messages are enabled except for EVENT and IF_D.

	If CONFIG_DEBUG=1, all kinds of debug messages can be configured except 
	for ENTRY, WARN and INFO. By default MSG, FATAL and ERROR are enabled.

	Some special debug messages,
		'*'		// MLAN driver ISR is called (bit 6 INTR enabled)
		'|'		// PS awake event is received (bit 5 EVENT enabled)
		'_'		// PS sleep event is received (bit 5 EVENT enabled)
		'+'		// PS sleep confirm is sent (bit 5 EVENT enabled)

	Examples:
		iwpriv mlan0 drvdbg             : Get the current driver debug masks
		iwpriv mlan0 drvdbg 0 0         : Disable all the debug messages
		iwpriv mlan0 drvdbg 7           : Enable MSG, FATAL and ERROR messages,
		                                  no change for if debug control
		iwpriv mlan0 drvdbg 3 1         : Enable MSG and FATAL messages,
		                                  enable IF_D message
		iwpriv mlan0 drvdbg -1 -1       : Enable all the debug messages

warmreset
	This command is used for warm reset of the interface.

	Usage:
		iwpriv mlanX warmreset

heartbeat
	This command is used to configure the heart beat.
	The current heart beat configuration is returned if no parameter provided.

	where the parameters are,
		hTime: time interval (in 100 ms) of the host to device heart beat,
		       minimum 10 (1s), 0: disable, -1: no change, 
		dTime: time interval (in 100 ms) of the device to host heart beat,
		       minimum 10 (1s), 0: disable, -1: no change

	Examples:
		iwpriv mlan0 heartbeat          : Get the heart beat configuration
		iwpriv mlan0 heartbeat  0  0    : Disable heart beat
		iwpriv mlan0 heartbeat  0 -1    : Disable host to device heart beat, 
		                                  keep device to host heart beat unchanged
		iwpriv mlan0 heartbeat -1  20   : Keep host to device heart beat unchanged,
		                                  enable device to host heart beat: 2s 
		iwpriv mlan0 heartbeat  40 50   : Enable host to device heart beat: 4s,
		                                  enable device to host heart beat: 5s 

regrdwr
	This command is used to read/write the adapter register.
	
	Usage:
		iwpriv mlanX regrdwr <type> <offset> [value]

	where the parameters are,
		<type>:     1:MAC, 2:BBP, 3:RF, 4: PMIC
		<offset>:   offset of register
		[value]:    value to be written

	Examples:
		iwpriv mlan0 regrdwr 1 0xa060       : Read the MAC register
		iwpriv mlan0 regrdwr 1 0xa060 0x12  : Write the MAC register

rdeeprom
	This command is used to read the EEPROM contents of the card.

	Usage:
		iwpriv mlanX rdeeprom <offset> <length>

	where the parameters are,
		<offset>:   0-16, multiples of 4
		<length>:   4-20, multiples of 4

	Example:
		iwpriv mlan0 rdeeprom 0 20      : Read 20 bytes of EEPROM data from offset 0

inactivityto
	This command is used to set/get the inactivity timeout value, which specifies 
	when WLAN device is put to sleep.

	Usage:
		iwpriv mlanX inactivityto <n> <m> <l> [k]

	where the parameter are:
		<n>: timeout unit in microseconds.
		<m>: Inactivity timeout for unicast data.
		<l>: Inactivity timeout for multicast data.
		[k]: Inactivity timeout for new Rx traffic after PS notification to AP.

	Examples:
		iwpriv mlan0 inactivityto           : Get the timeout value
		iwpriv mlan0 inactivityto 1000 2 3  : Set timeout unit to 1000 us (1 ms), 
		                                      inactivity timeout for unicast data is 2 ms,
		                                      inactivity timeout for multicast data is 3 ms


==============================================================================
		U S E R  M A N U A L  F O R  M L A N C O N F I G 

NAME
mlanconfig - configure the additional parameters available for the Marvell mdriver.

SYNOPSIS
mlanconfig -v
mlanconfig <mlanX> <command> [parameters] ...

mlanconfig mlanX hostcmd <crypto_test.conf> crypto_test
mlanconfig mlanX hostcmd <mef.conf> mefcfg
mlanconfig mlanX hostcmd <cfg_data.conf> cfg_data
mlanconfig mlanX hostcmd <subevent.conf> subevent_get
mlanconfig mlanX hostcmd <subevent.conf> subevent_set
mlanconfig mlanX hostcmd <auto_tx.conf> auto_tx_get
mlanconfig mlanX hostcmd <auto_tx.conf> nat_keep_alive
mlanconfig mlanX hostcmd <auto_tx.conf> auto_tx_unreg
mlanconfig mlanX hostcmd <txrate_cfg.conf> txrate_cfg_get
mlanconfig mlanX hostcmd <txrate_cfg.conf> txrate_cfg_set_bg
mlanconfig mlanX hostcmd <txrate_cfg.conf> txrate_cfg_set_bgn
mlanconfig mlanX arpfilter <arpfilter.conf>

DESCRIPTION

Those commands are used in Marvell specific application called mlanconfig.

===========
-v
	This command is used to display the version of mlanconfig utility.
	Usage:	
		mlanconfig -v

hostcmd crypto_test
	This command is used to test the encryption/decryption API of the firmware.

	Usage:
		mlanconfig mlanX hostcmd config/crypto_test.conf crypto_test

hostcmd mefcfg
	This command is used to set MEF settings.

	Usage:
		mlanconfig mlanX hostcmd config/mef.conf mefcfg

hostcmd cfg_data
	This command is used to set/get the configuration data to/from the firmware. 

	Usage:
		mlanconfig mlanX hostcmd config/cfg_data.conf cfg_data

hostcmd subevent_get
hostcmd subevent_set
	This command is used to get/set the configurations for event descriptor 
	interface command.
	subsvent_get: get subscribed event parameters
	subsvent_set: set subscribed event parameters

	Usage:
		mlanconfig mlanX hostcmd config/subevent.conf subevent_get
		mlanconfig mlanX hostcmd config/subevent.conf subevent_set

hostcmd auto_tx_get
hostcmd nat_keep_alive
hostcmd auto_tx_unreg
	This command is used to configures the Frame Auto Transmission parameters.
	auto_tx_get: get auto_tx parameters
	nat_keep_alive: register to firmware for sending NAT Keep Alive packet
	auto_tx_unreg: unregister to firmware auto_tx

	Usage:
		mlanconfig mlanX hostcmd config/auto_tx.conf auto_tx_get
		mlanconfig mlanX hostcmd config/auto_tx.conf nat_keep_alive
		mlanconfig mlanX hostcmd config/auto_tx.conf auto_tx_unreg

hostcmd txrate_cfg_get
hostcmd txrate_cfg_set_bg
hostcmd txrate_cfg_set_bgn
	This command is used to set/get the transmit data rate.

	Usage:
		mlanconfig mlanX hostcmd config/txrate_cfg.conf txrate_cfg_get
		mlanconfig mlanX hostcmd config/txrate_cfg.conf txrate_cfg_set_bg
		mlanconfig mlanX hostcmd config/txrate_cfg.conf txrate_cfg_set_bgn

arpfilter
	This command is used to configure the ARP filtering parameters.

	Usage:
		mlanconfig mlanX arpfilter config/arpfilter.conf

==============================================================================
